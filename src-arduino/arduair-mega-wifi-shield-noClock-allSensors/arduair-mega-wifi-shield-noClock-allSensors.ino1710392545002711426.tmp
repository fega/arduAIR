//libraries...
#include "Wire.h"      //for I2C communication
#include "DHT.h"       //for dht sensor
#include <SPI.h>       //for Serial communication (with the SD card)
#include <SD.h>        //SD card Library
#include <SFE_BMP180.h>//Sparkfun BMP180 pressure Sensor Library
#include <WiFi.h>

#define DS1307_ADDRESS 0x68 //clock pin 
#define DHTPIN 7            //DHT pin
#define DHTTYPE DHT11
#define server "arduair.herokuapp.com/test/"    // website address

File myFile;//Defining one file  class

char ssid[] = "yourNetwork"; //  your network SSID (name)
char pass[] = "secretPassword";    // your network password (use for WPA, or use as key for WEP)
String device,password;
int timezone;
int status = WL_IDLE_STATUS;

WiFiClient client;
float pm10,pm25;

DHT dht(DHTPIN, DHTTYPE); //DHT constructor
SFE_BMP180 bmp;           //bmp constructor

void setup() {
  Serial.begin(9600);
  Wire.begin();
  dht.begin();
  bmp.begin();
  //sdBegin();
  wifiBegin();
}

void loop() {
  Serial.print("LOOP");
}

void wifiBegin(){
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
  Serial.println("Connected to wifi");
}

void simple_request(int h,int t,float p,float l,float co,float so2,float no2){
  // close any connection before send a new request.
  // This will free the socket on the WiFi shield
   client.stop();

  // if there's a successful connection:
  if (client.connect(server, 80)) {
    Serial.println("connecting...");
    
    //String getRequest ="GET"+"hola"+" "
    // send the HTTP GET request:
    client.print("GET "); client.print("/"); client.print(device); client.print("/");client.print(password); client.print("/timezone") client.print(" HTTP/1.1");
    client.println("");
    // parameters:
    client.print("?z="); client.print(timezone)client.print(",");
    client.print("h="); client.print(h)client.print(",");
    client.print("t="); client.print(t)client.print(",");
    client.print("l="); client.print(l)client.print(",");
    client.print("co="); client.print(pm10)client.print(",");
    client.print("o3="); client.print(pm10)client.print(",");
    client.print("pm10="); client.print(pm10)client.print(",");
    client.print("pm25="); client.print(pm25)client.print(",");
    client.print("so2="); client.print(so2)client.print(",");
    client.print("no2="); client.print(no2)client.print(",");
    client.print("no2="); client.print(no2)client.print(",");
    client.println("");
    //server
    client.print("Host: ");client.print(server);
    client.println("User-Agent: Arduair");
    client.println("Connection: close");
    client.println();
  }
 }
void tableWrite(){
  //escribe en la SD, la tabla
  
  myFile = SD.open("DATA.txt", FILE_WRITE); //abrir la SD
  if (myFile){
    
    int   h = dht.readHumidity();  // 1* medir humedad
    int   t= dht.readTemperature();// 2* medir temperatura
    float p= readPressure();       // 3* medir presion
    float co=mq7Read();            // 4* medir sensor 1 y transformar
    float so2=zeso2Read();    
    float no2=zeno2Read();
    pmRead();

    myFile.print(h);
    myFile.print(",");
    myFile.print(t);
    myFile.print(",");
    myFile.print(p);
    myFile.print(",");
    myFile.print(co);
    myFile.print(",");
    myFile.print(so2);
    myFile.print(",");
    myFile.print(no2);
    myFile.print(",");
    
    myFile.println(" ");
    myFile.close();
  }
}
/*//////////////////////////////////////////////////////////////////
MQ-7 CO sensor
//////////////////////////////////////////////////////////////////*/
float mq7Read(){
  int sensorValue = analogRead(0);       // read analog input pin 0
  Serial.println(sensorValue, DEC);  // prints the value read
  delay(100);// wait 100ms for next reading

  float finalValue =sensorValue;
  return finalValue;
}
/*//////////////////////////////////////////////////////////////////
SD card begin
//////////////////////////////////////////////////////////////////*/
void sdBegin(){
  if (!SD.begin(4)) {
    //Serial.println("SD failed!");
    return;
  }
  //Serial.println("SD done.");
}
/*//////////////////////////////////////////////////////////////////
MQ-131 O3 low concentration sensor
//////////////////////////////////////////////////////////////////*/
float mq131Read(){
  int sensorValue = analogRead(0);       // read analog input pin 0
  Serial.println(sensorValue, DEC);  // prints the value read
  delay(100);// wait 100ms for next reading

  float finalValue =sensorValue;
  return finalValue;
}
/*//////////////////////////////////////////////////////////////////
ZE03-SO2 winsen sensor
//////////////////////////////////////////////////////////////////*/
float zeso2Read(){

}
/*//////////////////////////////////////////////////////////////////
ZE03-no2 winsen sensor
//////////////////////////////////////////////////////////////////*/
float zeno2Read(){

}
/*//////////////////////////////////////////////////////////////////
ZE03-co winsen sensor
//////////////////////////////////////////////////////////////////*/
float ze03_co(){

}
/*//////////////////////////////////////////////////////////////////
Shinyei PPD42: dust sensor
based on dustduino project
//////////////////////////////////////////////////////////////////*/
float pmRead(){
  unsigned long starttime;

  unsigned long triggerOnP10, triggerOffP10, pulseLengthP10, durationP10;
  boolean P10 = HIGH, triggerP10 = false;
  unsigned long triggerOnP25, triggerOffP25, pulseLengthP25, durationP25;
  boolean P25 = HIGH, triggerP25 = false;
  float ratioP10 = 0, ratioP25 = 0;
  unsigned long sampletime = 30000;
  float countP10, countP25;
  
  while((millis()-starttime)<sampletime){
    P10 = digitalRead(9);
    P25 = digitalRead(8);
    if(P10 == LOW && triggerP10 == false){
      triggerP10 = true;
      triggerOnP10 = micros();
    }
    if (P10 == HIGH && triggerP10 == true){
        triggerOffP10 = micros();
        pulseLengthP10 = triggerOffP10 - triggerOnP10;
        durationP10 = durationP10 + pulseLengthP10;
        triggerP10 = false;
    }
    if(P25 == LOW && triggerP25 == false){
      triggerP25 = true;
      triggerOnP25 = micros();
    }
    if (P25 == HIGH && triggerP25 == true){
      triggerOffP25 = micros();
      pulseLengthP25 = triggerOffP25 - triggerOnP25;
      durationP25 = durationP25 + pulseLengthP25;
      triggerP25 = false;
    }
  }
  ratioP10 = durationP10/(sampletime*10.0);  // Integer percentage 0=>100
  ratioP25 = durationP25/(sampletime*10.0);
  countP10 = 1.1*pow(ratioP10,3)-3.8*pow(ratioP10,2)+520*ratioP10+0.62;
  countP25 = 1.1*pow(ratioP25,3)-3.8*pow(ratioP25,2)+520*ratioP25+0.62;
  float PM10count = countP10; ////confirmmm!!!
  float PM25count = countP25 - countP10;
  
  // first, PM10 count to mass concentration conversion
  double r10 = 2.6*pow(10,-6);
  double pi = 3.14159;
  double vol10 = (4/3)*pi*pow(r10,3);
  double density = 1.65*pow(10,12);
  double mass10 = density*vol10;
  double K = 3531.5;
  pm10 = (PM10count)*K*mass10;
  
  // next, PM2.5 count to mass concentration conversion
  double r25 = 0.44*pow(10,-6);
  double vol25 = (4/3)*pi*pow(r25,3);
  double mass25 = density*vol25;
  pm25 = (PM25count)*K*mass25;
}
/*//////////////////////////////////////////////////////////////////
 BMP180 Pressure Sensor
//////////////////////////////////////////////////////////////////*/
float readPressure(){
 char state;
 double T,P,p0,a;
  // Loop here getting pressure readings every 10 seconds.
  state = bmp.startTemperature();
  if (state != 0)
  {
    delay(state);
    state = bmp.getTemperature(T);
    if (state != 0)
    {
      state = bmp.startPressure(3);
      if (state != 0)
      {
        delay(state);
        state = bmp.getPressure(P,T);
        if (state != 0)
        {
          // Print out the measurement:
          //Serial.print("absolute pressure: ");
          Serial.print(P*0.750061561303,2);
          //Serial.println(" mmHg");
          
          return P;
        }
        //else Serial.println("error retrieving pressure measurement\n");
      }
      //else Serial.println("error starting pressure measurement\n");
    }
    //else Serial.println("error retrieving temperature measurement\n");
  }
  //else Serial.println("error starting temperature measurement\n");
}

